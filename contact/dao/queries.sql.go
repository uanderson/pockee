// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package dao

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :exec
INSERT INTO contacts (id, name, email, phone, pix_key, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateContactParams struct {
	ID     string
	Name   string
	Email  *string
	Phone  *string
	PixKey *string
	UserID string
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) error {
	_, err := q.db.Exec(ctx, createContact,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.PixKey,
		arg.UserID,
	)
	return err
}

const createContactHistory = `-- name: CreateContactHistory :exec
INSERT INTO contact_histories (id, name, email, phone, pix_key, effective_at, contact_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateContactHistoryParams struct {
	ID          string
	Name        string
	Email       *string
	Phone       *string
	PixKey      *string
	EffectiveAt pgtype.Timestamp
	ContactID   string
}

func (q *Queries) CreateContactHistory(ctx context.Context, arg CreateContactHistoryParams) error {
	_, err := q.db.Exec(ctx, createContactHistory,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.PixKey,
		arg.EffectiveAt,
		arg.ContactID,
	)
	return err
}

const existsContactByID = `-- name: ExistsContactByID :one
SELECT EXISTS(SELECT 1 FROM contacts WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL)
`

type ExistsContactByIDParams struct {
	ID     string
	UserID string
}

func (q *Queries) ExistsContactByID(ctx context.Context, arg ExistsContactByIDParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsContactByID, arg.ID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getContactByID = `-- name: GetContactByID :one
SELECT id, name, email, phone, pix_key, deleted_at, user_id FROM contacts WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetContactByIDParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetContactByID(ctx context.Context, arg GetContactByIDParams) (Contact, error) {
	row := q.db.QueryRow(ctx, getContactByID, arg.ID, arg.UserID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.PixKey,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT id, name, email, phone, pix_key, deleted_at, user_id FROM contacts WHERE user_id = $1 AND deleted_at IS NULL ORDER BY name
`

func (q *Queries) GetContacts(ctx context.Context, userID string) ([]Contact, error) {
	rows, err := q.db.Query(ctx, getContacts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.PixKey,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteContact = `-- name: SoftDeleteContact :exec
UPDATE contacts SET deleted_at = $1 WHERE id = $2 AND user_id = $3
`

type SoftDeleteContactParams struct {
	DeletedAt pgtype.Timestamp
	ID        string
	UserID    string
}

func (q *Queries) SoftDeleteContact(ctx context.Context, arg SoftDeleteContactParams) error {
	_, err := q.db.Exec(ctx, softDeleteContact, arg.DeletedAt, arg.ID, arg.UserID)
	return err
}

const updateContact = `-- name: UpdateContact :exec
UPDATE contacts SET name = $1, email = $2, phone = $3, pix_key = $4
WHERE id = $5 AND user_id = $6
`

type UpdateContactParams struct {
	Name   string
	Email  *string
	Phone  *string
	PixKey *string
	ID     string
	UserID string
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) error {
	_, err := q.db.Exec(ctx, updateContact,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.PixKey,
		arg.ID,
		arg.UserID,
	)
	return err
}
