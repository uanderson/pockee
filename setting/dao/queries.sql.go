// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package dao

import (
	"context"
)

const deleteSettingByKey = `-- name: DeleteSettingByKey :exec
DELETE FROM settings WHERE key = $1 AND user_id = $2
`

type DeleteSettingByKeyParams struct {
	Key    string
	UserID string
}

func (q *Queries) DeleteSettingByKey(ctx context.Context, arg DeleteSettingByKeyParams) error {
	_, err := q.db.Exec(ctx, deleteSettingByKey, arg.Key, arg.UserID)
	return err
}

const existsSettingByKey = `-- name: ExistsSettingByKey :one
SELECT EXISTS (SELECT 1 FROM settings WHERE key = $1 AND user_id = $2)
`

type ExistsSettingByKeyParams struct {
	Key    string
	UserID string
}

func (q *Queries) ExistsSettingByKey(ctx context.Context, arg ExistsSettingByKeyParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsSettingByKey, arg.Key, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getSettingByKey = `-- name: GetSettingByKey :one
SELECT id, key, value, user_id FROM settings WHERE key = $1 AND user_id = $2
`

type GetSettingByKeyParams struct {
	Key    string
	UserID string
}

func (q *Queries) GetSettingByKey(ctx context.Context, arg GetSettingByKeyParams) (Setting, error) {
	row := q.db.QueryRow(ctx, getSettingByKey, arg.Key, arg.UserID)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.UserID,
	)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :exec
INSERT INTO settings (id, key, value, user_id) VALUES ($1, $2, $3, $4)
ON CONFLICT (key, user_id) DO UPDATE SET value = $3
`

type UpdateSettingParams struct {
	ID     string
	Key    string
	Value  string
	UserID string
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.Exec(ctx, updateSetting,
		arg.ID,
		arg.Key,
		arg.Value,
		arg.UserID,
	)
	return err
}
